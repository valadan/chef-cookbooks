"""
This is a WLST script that is generated by the WebLogic Scripting Tool (WLST)
Configuration file converted               : /home/vagrant/Oracle/products/user_projects/domains/development/config/config.xml
WLST script generated to file              : /home/vagrant/Oracle/products/user_projects/domains/development/config/config.py
Properties file associated with the script : /home/vagrant/Oracle/products/user_projects/domains/development/config/config.py.properties

This script will first try to connect to a running server using the 
values in the properties file. If there is no server running, WLST
will start a server with the values in the properties file. You should change
these values to suit your environmental needs. After running the script, 
the server that is started(if started one) will be shutdown. 
This might exit you from your WLST shell."""

from weblogic.descriptor import BeanAlreadyExistsException
from java.lang.reflect import UndeclaredThrowableException
from java.lang import System
import javax
from javax import management
from javax.management import MBeanException
from javax.management import RuntimeMBeanException
import javax.management.MBeanException
from java.lang import UnsupportedOperationException


def initConfigToScriptRun():
  global startedNewServer
  loadProperties("config.py.properties")
  hideDisplay()
  hideDumpStack("true")
  # try connecting to a running server if it is already running ... 
  if connected=="false":
    try:
      URL="t3://"+adminServerListenAddress+":"+adminServerListenPort
      connect(userName, passWord, URL, userConfigFile="c2sConfigdevelopment", userKeyFile="c2sSecretdevelopment")
    except WLSTException:
      print 'No server is running at '+URL+', the script will start a new server'
  hideDumpStack("false")
  if connected=="false":
    print 'Starting a brand new server at '+URL+' with server name '+adminServerName
    print 'Please see the server log files for startup messages available at '+domainDir
    # If a config.xml exists in the domainDir, WLST will use that config.xml to bring up the server. 
    # If you would like WLST to overwrite this directory, you should specify overWriteRootDir='true' as shown below
    # startServer(adminServerName, domName, URL, userName, passWord,domainDir, overWriteRootDir='true')
    _timeOut = Integer(TimeOut)
    # If you want to specify additional JVM arguments, set them using startServerJvmArgs in the property file or below
    _startServerJvmArgs=startServerJvmArgs
    if (_startServerJvmArgs=="" and (System.getProperty("java.vendor").find("Sun")>=0 or System.getProperty("java.vendor").find("Oracle")>=0 or System.getProperty("java.vendor").find("Hewlett")>=0)):
      _startServerJvmArgs = " -XX:MaxPermSize=128m"
    if overWriteRootDir=='true':
      startServer(adminServerName, domName, URL, userName, passWord,domainDir, timeout=_timeOut.intValue(), overWriteRootDir='true', block='true', jvmArgs=_startServerJvmArgs)
    else:
      startServer(adminServerName, domName, URL, userName, passWord,domainDir, timeout=_timeOut.intValue(), block='true', jvmArgs=_startServerJvmArgs)
    startedNewServer=1
    print "Started Server. Trying to connect to the server ... "
    connect(userName, passWord, URL, userConfigFile="c2sConfigdevelopment", userKeyFile="c2sSecretdevelopment")
    if connected=='false':
      stopExecution('You need to be connected.')

def startTransaction():
  edit()
  startEdit()

def endTransaction():
  startEdit()
  save()
  activate(block="true")

from javax.management import InstanceAlreadyExistsException
from java.lang import Exception
from jarray import array

def endOfConfigToScriptRun():
  global startedNewServer
  #Save the changes you have made
  # shutdown the server you have started
  if startedNewServer==1:
    print 'Shutting down the server that is started... '
    shutdown(force='true', block='true')
  print 'Done executing the script.'

def create_Server_0(path, beanName):
  cd(path)
  try:
    print "creating mbean of type Server ... "
    theBean = cmo.lookupServer(beanName)
    if theBean == None:
      cmo.createServer(beanName)
  except java.lang.UnsupportedOperationException, usoe:
    pass
  except weblogic.descriptor.BeanAlreadyExistsException,bae:
    pass
  except java.lang.reflect.UndeclaredThrowableException,udt:
    pass

def create_Realm_2(path, beanName):
  cd(path)
  try:
    print "creating mbean of type Realm ... "
    theBean = cmo.lookupRealm(beanName)
    if theBean == None:
      cmo.createRealm(beanName)
  except java.lang.UnsupportedOperationException, usoe:
    pass
  except weblogic.descriptor.BeanAlreadyExistsException,bae:
    pass
  except java.lang.reflect.UndeclaredThrowableException,udt:
    pass

def create_Authorizer_4(path, beanName):
  cd(path)
  try:
    print "creating mbean of type Authorizer ... "
    theBean = cmo.lookupAuthorizer(beanName)
    if theBean == None:
      cmo.createAuthorizer(beanName,"weblogic.security.providers.xacml.authorization.XACMLAuthorizer")
  except java.lang.UnsupportedOperationException, usoe:
    pass
  except weblogic.descriptor.BeanAlreadyExistsException,bae:
    pass
  except java.lang.reflect.UndeclaredThrowableException,udt:
    pass

def create_Adjudicator_6(path, beanName):
  cd(path)
  try:
    print "creating mbean of type Adjudicator ... "
    theBean = cmo.getAdjudicator()
    if theBean == None:
      cmo.createAdjudicator(beanName,"weblogic.security.providers.authorization.DefaultAdjudicator")
  except java.lang.UnsupportedOperationException, usoe:
    pass
  except weblogic.descriptor.BeanAlreadyExistsException,bae:
    pass
  except java.lang.reflect.UndeclaredThrowableException,udt:
    pass

def create_AuthenticationProvider_8(path, beanName):
  cd(path)
  try:
    print "creating mbean of type AuthenticationProvider ... "
    theBean = cmo.lookupAuthenticationProvider(beanName)
    if theBean == None:
      cmo.createAuthenticationProvider(beanName,"weblogic.security.providers.authentication.DefaultAuthenticator")
  except java.lang.UnsupportedOperationException, usoe:
    pass
  except weblogic.descriptor.BeanAlreadyExistsException,bae:
    pass
  except java.lang.reflect.UndeclaredThrowableException,udt:
    pass

def create_CertPathProvider_12(path, beanName):
  cd(path)
  try:
    print "creating mbean of type CertPathProvider ... "
    theBean = cmo.lookupCertPathProvider(beanName)
    if theBean == None:
      cmo.createCertPathProvider(beanName,"weblogic.security.providers.pk.WebLogicCertPathProvider")
  except java.lang.UnsupportedOperationException, usoe:
    pass
  except weblogic.descriptor.BeanAlreadyExistsException,bae:
    pass
  except java.lang.reflect.UndeclaredThrowableException,udt:
    pass

def create_CredentialMapper_14(path, beanName):
  cd(path)
  try:
    print "creating mbean of type CredentialMapper ... "
    theBean = cmo.lookupCredentialMapper(beanName)
    if theBean == None:
      cmo.createCredentialMapper(beanName,"weblogic.security.providers.credentials.DefaultCredentialMapper")
  except java.lang.UnsupportedOperationException, usoe:
    pass
  except weblogic.descriptor.BeanAlreadyExistsException,bae:
    pass
  except java.lang.reflect.UndeclaredThrowableException,udt:
    pass

def create_RoleMapper_16(path, beanName):
  cd(path)
  try:
    print "creating mbean of type RoleMapper ... "
    theBean = cmo.lookupRoleMapper(beanName)
    if theBean == None:
      cmo.createRoleMapper(beanName,"weblogic.security.providers.xacml.authorization.XACMLRoleMapper")
  except java.lang.UnsupportedOperationException, usoe:
    pass
  except weblogic.descriptor.BeanAlreadyExistsException,bae:
    pass
  except java.lang.reflect.UndeclaredThrowableException,udt:
    pass

def setAttributes_SecurityConfiguration_18():
  cd("/SecurityConfiguration/development")
  print "setting attributes for mbean type SecurityConfiguration"
  setEncrypted("Credential", "c2s19", "c2sConfigdevelopment", "c2sSecretdevelopment")
  setEncrypted("NodeManagerPassword", "c2s20", "c2sConfigdevelopment", "c2sSecretdevelopment")
  setEncrypted("NodeManagerPassword", "c2s21", "c2sConfigdevelopment", "c2sSecretdevelopment")
  set("NodeManagerUsername", "Weblogic")
  setEncrypted("Credential", "c2s22", "c2sConfigdevelopment", "c2sSecretdevelopment")

def setAttributes_EmbeddedLDAP_23():
  cd("/EmbeddedLDAP/development")
  print "setting attributes for mbean type EmbeddedLDAP"
  setEncrypted("Credential", "c2s24", "c2sConfigdevelopment", "c2sSecretdevelopment")
  setEncrypted("Credential", "c2s25", "c2sConfigdevelopment", "c2sSecretdevelopment")

def setAttributesFor_applications_1():
  cd("/Servers/applications")
  print "setting attributes for mbean type Server"
  set("ListenPort", "7729")
  set("TunnelingEnabled", "true")
  set("ListenAddress", "")

def setAttributes_Domain_26():
  cd("/")
  print "setting attributes for mbean type Domain"
  set("DomainVersion", "12.1.2.0.0")
  set("ConfigurationVersion", "12.1.2.0.0")
  set("AdminServerName", "AdminServer")

def setAttributesFor_DefaultIdentityAsserter_11():
  cd("/SecurityConfiguration/development/Realms/myrealm/AuthenticationProviders/DefaultIdentityAsserter")
  print "setting attributes for mbean type DefaultIdentityAsserter"
  set("ActiveTypes", jarray.array(["AuthenticatedUser"], String))

def setAttributes_SSL_27():
  cd("/Servers/applications/SSL/applications")
  print "setting attributes for mbean type SSL"
  set("Enabled", "false")

try:
  initConfigToScriptRun()
  startTransaction()
  create_Server_0("/", "applications")
  create_Realm_2("/SecurityConfiguration/development", "myrealm")
  create_Authorizer_4("/SecurityConfiguration/development/Realms/myrealm", "XACMLAuthorizer")
  create_Adjudicator_6("/SecurityConfiguration/development/Realms/myrealm", "DefaultAdjudicator")
  create_AuthenticationProvider_8("/SecurityConfiguration/development/Realms/myrealm", "DefaultAuthenticator")
  create_AuthenticationProvider_8("/SecurityConfiguration/development/Realms/myrealm", "DefaultIdentityAsserter")
  create_CertPathProvider_12("/SecurityConfiguration/development/Realms/myrealm", "WebLogicCertPathProvider")
  create_CredentialMapper_14("/SecurityConfiguration/development/Realms/myrealm", "DefaultCredentialMapper")
  create_RoleMapper_16("/SecurityConfiguration/development/Realms/myrealm", "XACMLRoleMapper")
  setAttributesFor_applications_1()
  setAttributesFor_DefaultIdentityAsserter_11()
  setAttributes_SecurityConfiguration_18()
  setAttributes_EmbeddedLDAP_23()
  setAttributes_Domain_26()
  setAttributes_SSL_27()
  endTransaction()
finally:
  endOfConfigToScriptRun()
